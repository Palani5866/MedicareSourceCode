'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5485
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRenewalNotice"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRenewalNotice
    Inherits Global.System.Data.DataSet
    
    Private tabledt_Member_Policy As dt_Member_PolicyDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dt_Member_Policy")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Member_PolicyDataTable(ds.Tables("dt_Member_Policy")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dt_Member_Policy() As dt_Member_PolicyDataTable
        Get
            Return Me.tabledt_Member_Policy
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRenewalNotice = CType(MyBase.Clone,dsRenewalNotice)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dt_Member_Policy")) Is Nothing) Then
                MyBase.Tables.Add(New dt_Member_PolicyDataTable(ds.Tables("dt_Member_Policy")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledt_Member_Policy = CType(MyBase.Tables("dt_Member_Policy"),dt_Member_PolicyDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledt_Member_Policy) Is Nothing) Then
                Me.tabledt_Member_Policy.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRenewalNotice"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRenewalNotice.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledt_Member_Policy = New dt_Member_PolicyDataTable
        MyBase.Tables.Add(Me.tabledt_Member_Policy)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedt_Member_Policy() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRenewalNotice = New dsRenewalNotice
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dt_Member_PolicyRowChangeEventHandler(ByVal sender As Object, ByVal e As dt_Member_PolicyRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dt_Member_PolicyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnFull_Name As Global.System.Data.DataColumn
        
        Private columnIC_NEW As Global.System.Data.DataColumn
        
        Private columnAdd1 As Global.System.Data.DataColumn
        
        Private columnAdd2 As Global.System.Data.DataColumn
        
        Private columnTown As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnPostcode As Global.System.Data.DataColumn
        
        Private columnPolicy_No As Global.System.Data.DataColumn
        
        Private columnPolicy_Type As Global.System.Data.DataColumn
        
        Private columnExpiry_Date As Global.System.Data.DataColumn
        
        Private columnDeduction_Amount As Global.System.Data.DataColumn
        
        Private columnExlusionClause As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnAdd3 As Global.System.Data.DataColumn
        
        Private columnAdd4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dt_Member_Policy"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Full_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFull_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IC_NEWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIC_NEW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TownColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTown
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Policy_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPolicy_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Policy_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPolicy_Type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expiry_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpiry_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deduction_AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeduction_Amount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExlusionClauseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExlusionClause
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Add4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdd4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dt_Member_PolicyRow
            Get
                Return CType(Me.Rows(index),dt_Member_PolicyRow)
            End Get
        End Property
        
        Public Event dt_Member_PolicyRowChanging As dt_Member_PolicyRowChangeEventHandler
        
        Public Event dt_Member_PolicyRowChanged As dt_Member_PolicyRowChangeEventHandler
        
        Public Event dt_Member_PolicyRowDeleting As dt_Member_PolicyRowChangeEventHandler
        
        Public Event dt_Member_PolicyRowDeleted As dt_Member_PolicyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddt_Member_PolicyRow(ByVal row As dt_Member_PolicyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddt_Member_PolicyRow( _
                    ByVal ID As String,  _
                    ByVal Full_Name As String,  _
                    ByVal IC_NEW As String,  _
                    ByVal Add1 As String,  _
                    ByVal Add2 As String,  _
                    ByVal Town As String,  _
                    ByVal State As String,  _
                    ByVal Postcode As String,  _
                    ByVal Policy_No As String,  _
                    ByVal Policy_Type As String,  _
                    ByVal Expiry_Date As String,  _
                    ByVal Deduction_Amount As String,  _
                    ByVal ExlusionClause As String,  _
                    ByVal Title As String,  _
                    ByVal Add3 As String,  _
                    ByVal Add4 As String) As dt_Member_PolicyRow
            Dim rowdt_Member_PolicyRow As dt_Member_PolicyRow = CType(Me.NewRow,dt_Member_PolicyRow)
            Dim columnValuesArray() As Object = New Object() {ID, Full_Name, IC_NEW, Add1, Add2, Town, State, Postcode, Policy_No, Policy_Type, Expiry_Date, Deduction_Amount, ExlusionClause, Title, Add3, Add4}
            rowdt_Member_PolicyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdt_Member_PolicyRow)
            Return rowdt_Member_PolicyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dt_Member_PolicyDataTable = CType(MyBase.Clone,dt_Member_PolicyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dt_Member_PolicyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnFull_Name = MyBase.Columns("Full_Name")
            Me.columnIC_NEW = MyBase.Columns("IC_New")
            Me.columnAdd1 = MyBase.Columns("Add1")
            Me.columnAdd2 = MyBase.Columns("Add2")
            Me.columnTown = MyBase.Columns("Town")
            Me.columnState = MyBase.Columns("State")
            Me.columnPostcode = MyBase.Columns("Postcode")
            Me.columnPolicy_No = MyBase.Columns("Policy_No")
            Me.columnPolicy_Type = MyBase.Columns("Policy_Type")
            Me.columnExpiry_Date = MyBase.Columns("Expiry_Date")
            Me.columnDeduction_Amount = MyBase.Columns("Deduction_Amount")
            Me.columnExlusionClause = MyBase.Columns("ExlusionClause")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnAdd3 = MyBase.Columns("Add3")
            Me.columnAdd4 = MyBase.Columns("Add4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnFull_Name = New Global.System.Data.DataColumn("Full_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFull_Name)
            Me.columnIC_NEW = New Global.System.Data.DataColumn("IC_New", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnIC_NEW.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "IC_NEW")
            Me.columnIC_NEW.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "IC_NEWColumn")
            Me.columnIC_NEW.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnIC_NEW")
            Me.columnIC_NEW.ExtendedProperties.Add("Generator_UserColumnName", "IC_New")
            MyBase.Columns.Add(Me.columnIC_NEW)
            Me.columnAdd1 = New Global.System.Data.DataColumn("Add1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd1)
            Me.columnAdd2 = New Global.System.Data.DataColumn("Add2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd2)
            Me.columnTown = New Global.System.Data.DataColumn("Town", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTown)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnPostcode = New Global.System.Data.DataColumn("Postcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostcode)
            Me.columnPolicy_No = New Global.System.Data.DataColumn("Policy_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPolicy_No)
            Me.columnPolicy_Type = New Global.System.Data.DataColumn("Policy_Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPolicy_Type)
            Me.columnExpiry_Date = New Global.System.Data.DataColumn("Expiry_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpiry_Date)
            Me.columnDeduction_Amount = New Global.System.Data.DataColumn("Deduction_Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeduction_Amount)
            Me.columnExlusionClause = New Global.System.Data.DataColumn("ExlusionClause", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExlusionClause)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnAdd3 = New Global.System.Data.DataColumn("Add3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd3)
            Me.columnAdd4 = New Global.System.Data.DataColumn("Add4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdd4)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdt_Member_PolicyRow() As dt_Member_PolicyRow
            Return CType(Me.NewRow,dt_Member_PolicyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dt_Member_PolicyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dt_Member_PolicyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dt_Member_PolicyRowChangedEvent) Is Nothing) Then
                RaiseEvent dt_Member_PolicyRowChanged(Me, New dt_Member_PolicyRowChangeEvent(CType(e.Row,dt_Member_PolicyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dt_Member_PolicyRowChangingEvent) Is Nothing) Then
                RaiseEvent dt_Member_PolicyRowChanging(Me, New dt_Member_PolicyRowChangeEvent(CType(e.Row,dt_Member_PolicyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dt_Member_PolicyRowDeletedEvent) Is Nothing) Then
                RaiseEvent dt_Member_PolicyRowDeleted(Me, New dt_Member_PolicyRowChangeEvent(CType(e.Row,dt_Member_PolicyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dt_Member_PolicyRowDeletingEvent) Is Nothing) Then
                RaiseEvent dt_Member_PolicyRowDeleting(Me, New dt_Member_PolicyRowChangeEvent(CType(e.Row,dt_Member_PolicyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedt_Member_PolicyRow(ByVal row As dt_Member_PolicyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRenewalNotice = New dsRenewalNotice
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dt_Member_PolicyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dt_Member_PolicyRow
        Inherits Global.System.Data.DataRow
        
        Private tabledt_Member_Policy As dt_Member_PolicyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledt_Member_Policy = CType(Me.Table,dt_Member_PolicyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Full_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Full_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Full_Name' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Full_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IC_NEW() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.IC_NEWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IC_New' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.IC_NEWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add1() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Add1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add1' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Add1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add2() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Add2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add2' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Add2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Town() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.TownColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Town' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.TownColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Postcode() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.PostcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Postcode' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.PostcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Policy_No() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Policy_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Policy_No' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Policy_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Policy_Type() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Policy_TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Policy_Type' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Policy_TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expiry_Date() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Expiry_DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expiry_Date' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Expiry_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deduction_Amount() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Deduction_AmountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Deduction_Amount' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Deduction_AmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExlusionClause() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.ExlusionClauseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExlusionClause' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.ExlusionClauseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Title' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add3() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Add3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add3' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Add3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Add4() As String
            Get
                Try 
                    Return CType(Me(Me.tabledt_Member_Policy.Add4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Add4' in table 'dt_Member_Policy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledt_Member_Policy.Add4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tabledt_Member_Policy.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFull_NameNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Full_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFull_NameNull()
            Me(Me.tabledt_Member_Policy.Full_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIC_NEWNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.IC_NEWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIC_NEWNull()
            Me(Me.tabledt_Member_Policy.IC_NEWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd1Null() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Add1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd1Null()
            Me(Me.tabledt_Member_Policy.Add1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd2Null() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Add2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd2Null()
            Me(Me.tabledt_Member_Policy.Add2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTownNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.TownColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTownNull()
            Me(Me.tabledt_Member_Policy.TownColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tabledt_Member_Policy.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostcodeNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.PostcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostcodeNull()
            Me(Me.tabledt_Member_Policy.PostcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPolicy_NoNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Policy_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPolicy_NoNull()
            Me(Me.tabledt_Member_Policy.Policy_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPolicy_TypeNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Policy_TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPolicy_TypeNull()
            Me(Me.tabledt_Member_Policy.Policy_TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpiry_DateNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Expiry_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpiry_DateNull()
            Me(Me.tabledt_Member_Policy.Expiry_DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeduction_AmountNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Deduction_AmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeduction_AmountNull()
            Me(Me.tabledt_Member_Policy.Deduction_AmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExlusionClauseNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.ExlusionClauseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExlusionClauseNull()
            Me(Me.tabledt_Member_Policy.ExlusionClauseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tabledt_Member_Policy.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd3Null() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Add3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd3Null()
            Me(Me.tabledt_Member_Policy.Add3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdd4Null() As Boolean
            Return Me.IsNull(Me.tabledt_Member_Policy.Add4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdd4Null()
            Me(Me.tabledt_Member_Policy.Add4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dt_Member_PolicyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dt_Member_PolicyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dt_Member_PolicyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dt_Member_PolicyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
